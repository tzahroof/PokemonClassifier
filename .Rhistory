newFrame <- data.frame(pokedata$Name[indices], pokedata$Tier[indices], pokedata$TierScore[indices], predVals, predCat)
newFrame
}
lm.notyping.table <- getTable(test.indices, lm.notyping.pred)
which(lm.notyping.pred > 5 )
which(lm.notyping.pred < 6 )
which(lm.notyping.pred > 5 && lm.notyping.pred < 6)
getTable <- function(indices, predVals)
{
predCat <- rep("N/A", length(predVals))
predCat[which(predVals < 0.5)] = "PU"
predCat[which(predVals >= 9.5)] = "AG"
print(tierScore)
for(i in rev(2:length(tierCategories)-1))
{
print(paste0("i :: ", i))
print(paste0("tierScore[i] :: ", tierScore[i]))
print(paste0("tier[i-1] :: ", tierScore[i-1]))
print(paste0("tier[i+1] :: ", tierScore[i+1]))
print("Greater qualification")
print(paste0(which(predVals >= (tierScore[i] + tierScore[i+1])/2)))
print("< qualification")
print(paste0(which(predVals <  (tierScore[i] + tierScore[i-1])/2)))
print("Both qualifications")
print(paste0(which(predVals >= (tierScore[i] + tierScore[i+1])/2 & predVals < (tierScore[i] + tierScore[i-1])/2)))
predCat[which(predVals >= (tierScore[i] + tierScore[i+1])/2 &
predVals < (tierScore[i] + tierScore[i-1])/2)] <- tierCategories[i]
}
newFrame <- data.frame(pokedata$Name[indices], pokedata$Tier[indices], pokedata$TierScore[indices], predVals, predCat)
newFrame
}
lm.notyping.table <- getTable(test.indices, lm.notyping.pred)
View(lm.notyping.table)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
lm.notyping.table <- lm.notyping.table[order(lm.notyping.table$Actual.Score),]
lm.notyping.table
lm.notyping.table <- lm.notyping.table[order(-lm.notyping.table$Actual.Score),]
lm.notyping.table
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
print(3:15)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
pokedata[3:14,]
pokedata[,3:14]
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
pokedata[,3:14]
pokedata[,3:14][train.indices]
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
coef(lm.notyping.fit)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
View(pokedata)
unique(pokedata.type)
unique(pokedata$type)
unique(pokedata$Type.1)
unique(pokedata$Type.2)
which(pokedata$Type.1 != pokedata$Type.2)
setdiff(pokedata$Type.1, pokedata$Type.2)
length(unique(pokedata$Type.1))
matrix(rep(0, length(unique(pokedata$Type.1)) * nrow(pokedata)), nrow=nrow(pokedata), ncol=length(unique(pokedata$Type.1)))
###
#Typing datasheet
###
nPokTypes <- length(unique(pokedata$Type.1))
typeMatrix <- matrix(rep(0, (nPokTypes-1) * nrow(pokedata)),
nrow=nrow(pokedata), ncol=nPokTypes-1)
typeMatrix
nPokTypes <- length(unique(pokedata$Type.1))
typeMatrix <- data.frame(matrix(rep(0, (nPokTypes) * nrow(pokedata)),
nrow=nrow(pokedata), ncol=nPokTypes))
colnames(typeMatrix) <- unique(pokedata$Type.1)
head(colnames)
head(typeMatrix)
typeMatrix$(pokedata$Type.1[1])
typeMatrix[pokedata$Type.1[1]]
pokedata$Type.1
pokedata$Type.1[1]
typeMatrix[pokedata$Type.1[1],1] = 1
typeMatrix
typeMatrix[pokedata$Type.1[1],1]
typeMatrix[pokedata$Type.1[1]]
nPokTypes <- length(unique(pokedata$Type.1))
typeMatrix <- data.frame(matrix(rep(0, (nPokTypes) * nrow(pokedata)),
nrow=nrow(pokedata), ncol=nPokTypes))
colnames(typeMatrix) <- unique(pokedata$Type.1)
typeMatrix[pokedata$Type.1[1]][1]
typeMatrix[pokedata$Type.1[1]]
typeMatrix[pokedata$Type.1[1]](1)
typeMatrix[pokedata$Type.1[1]]
typeMatrix[pokedata$Type.1[1]][1]
class(typeMatrix[pokedata$Type.1[1]])
typeMatrix[pokedata$Type.1[1]][,1]
typeMatrix[pokedata$Type.1[1]]
typeMatrix[1, pokedata$Type.1[1]]
nPokTypes <- length(unique(pokedata$Type.1))
typeMatrix <- data.frame(matrix(rep(0, (nPokTypes) * nrow(pokedata)),
nrow=nrow(pokedata), ncol=nPokTypes))
colnames(typeMatrix) <- unique(pokedata$Type.1)
for(i in 1:nrow(pokedata))
{
typeMatrix[i, pokedata$Type.1[i]] = 1
if(pokedata$Type.1[i] != "N/A")
{
typeMatrix[i, pokedata$Type.2[i]] = 1
}
}
typeMatrix
View(typeMatrix)
nPokTypes <- length(unique(pokedata$Type.1))
typeMatrix <- data.frame(matrix(rep(0, (nPokTypes) * nrow(pokedata)),
nrow=nrow(pokedata), ncol=nPokTypes))
colnames(typeMatrix) <- unique(pokedata$Type.1)
for(i in 1:nrow(pokedata))
{
typeMatrix[i, pokedata$Type.1[i]] = 1
if(pokedata$Type.2[i] != "N/A")
{
typeMatrix[i, pokedata$Type.2[i]] = 1
}
}
View(typeMatrix)
pokedata <- data.frame(pokedata, typeMatrix)
View(pokedata)
head(pokedata)
###
#Build Linear Model model  (TYPING)
###
lm.typing.fit <- lm(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata, subset=train.indices)
lm.typing.pred <- predict(lm.typing.fit, newdata = pokedata[test.indices, ])
getRMSE(lm.typing.pred, pokedata$TierScore[test.indices])
lm.typing.table <- getTable(test.indices, lm.typing.pred)
#Show results
View(lm.typing.table)
summary(lm.typing.fit)
coef(lm.typing.fit)
cat("\014") # clears the console
rm(list=ls()) #clears all objects from the environment
#laptop workspace
setwd("C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier")
pokedata<- read.csv("./smogon.csv", as.is=T)
View(pokedata)
#Fill out all the empty columns in Type with "N/A"
pokedata[pokedata$Type.2 == "",]$Type.2 <- "N/A"
###
#Replace the tiers with scaling points
###
tierCategories = unique(pokedata$Tier)
tierScore <- seq(0, length(unique(pokedata$Tier)) - 1)
tierScore <- rev(tierScore)
pokedata <- data.frame(pokedata, rep(0, times=nrow(pokedata)))
colnames(pokedata)[ncol(pokedata)] <- "TierScore"
for(i in seq(1, length(tierCategories)))
{
pokedata[pokedata$Tier == tierCategories[i], ]$TierScore <- tierScore[i]
}
###
#Replace Legendary boolean with 1/0 for true/false
###
pokedata$Legendary <- as.integer(as.logical(pokedata$Legendary))
pokedata$Mega      <- as.integer(as.logical(pokedata$Mega))
nPokTypes <- length(unique(pokedata$Type.1))
typeMatrix <- data.frame(matrix(rep(0, (nPokTypes) * nrow(pokedata)),
nrow=nrow(pokedata), ncol=nPokTypes))
colnames(typeMatrix) <- unique(pokedata$Type.1)
for(i in 1:nrow(pokedata))
{
typeMatrix[i, pokedata$Type.1[i]] = 1
if(pokedata$Type.2[i] != "N/A")
{
typeMatrix[i, pokedata$Type.2[i]] = 1
}
}
pokedata <- data.frame(pokedata, typeMatrix)
###
#Create training and test data
###
set.seed(2019)
maxfolds <- 7
folds <- sample(rep(1:maxfolds, length=nrow(pokedata)))
#set the last fold to be a test set
test.indices  <- which(folds == maxfolds)
train.indices <- which(folds != maxfolds)
###
# Helper Functions to display data
###
getRMSE <- function(preddata, testdata)
{
this.rmse <- sqrt(mean((preddata-testdata)^2))
this.rmse
}
getTable <- function(indices, predVals)
{
predCat <- rep("N/A", length(predVals))
predCat[which(predVals < 0.5)] = "PU"
predCat[which(predVals >= 9.5)] = "AG"
print(tierScore)
for(i in rev(2:length(tierCategories)-1))
{
predCat[which(predVals >= (tierScore[i] + tierScore[i+1])/2 &
predVals < (tierScore[i] + tierScore[i-1])/2)] <- tierCategories[i]
}
newFrame <- data.frame(pokedata$Name[indices], pokedata$TierScore[indices], predVals, pokedata$Tier[indices], predCat,
pokedata[,3:14][indices,])
colnames(newFrame) <- c("Pokemon", "Actual.Score", "Predicted.Score", "Real.Tier", "Predicted.Tier",colnames(pokedata)[3:14])
newFrame <- newFrame[order(-newFrame$Actual.Score),]
newFrame
}
###
#Build Linear Model model  (no typing)
###
lm.notyping.fit <- lm(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega,
data = pokedata, subset=train.indices)
lm.notyping.pred <- predict(lm.notyping.fit, newdata = pokedata[test.indices, ])
getRMSE(lm.notyping.pred, pokedata$TierScore[test.indices])
lm.notyping.table <- getTable(test.indices, lm.notyping.pred)
#Show results
View(lm.notyping.table)
summary(lm.notyping.fit)
coef(lm.notyping.fit)
###
#Build Linear Model model  (TYPING)
###
lm.typing.fit <- lm(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata, subset=train.indices)
lm.typing.pred <- predict(lm.typing.fit, newdata = pokedata[test.indices, ])
getRMSE(lm.typing.pred, pokedata$TierScore[test.indices])
lm.typing.table <- getTable(test.indices, lm.typing.pred)
#Show results
View(lm.typing.table)
summary(lm.typing.fit)
coef(lm.typing.fit)
model.test.errors <- data.frame()
model.test.errors <- data.frame(model.test.errors, getRMSE(lm.notyping.pred, pokedata$TierScore[test.indices]))
model.test.errors <- c(model.test.errors, getRMSE(lm.notyping.pred, pokedata$TierScore[test.indices]))
model.test.errors <- c()
model.test.errors <- c(model.test.errors, getRMSE(lm.notyping.pred, pokedata$TierScore[test.indices]))
names(model.test.errors)[length(model.test.errors)] <- "Lin.No.Type"
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
View(model.test.errors)
require(glmnet)
?cv.glmnet
y.train <- pokedata$TierScore
y.train
x.vals <- data.matrix(pokedata)
x
x.vals
View(x.vals)
x.vals <- x.vals[,6:ncol(x.vals)]
View(x.vals)
x.vals <- cbind(x.vals[,1:9],x.vals[,12:ncol(x.vals)]
)
View(x.vals)
y.test <- y.vals[test.indices]
x.test <- x.vals[test.indices, ]
#make y and x matrices because the LASSO package is hot garbage and you all know it
y.vals <- pokedata$TierScore
x.vals <- data.matrix(pokedata)
x.vals <- x.vals[,6:ncol(x.vals)]
x.vals <- cbind(x.vals[,1:9],x.vals[,12:ncol(x.vals)])
y.test <- y.vals[test.indices]
x.test <- x.vals[test.indices, ]
y.train <- y.vals[train.indices]
x.train <- x.vals[train.indices]
#Build model
cv.lin.lasso <- cv.glmnet(x=x.train,y=y.train)
#make train and test data
y.test <- y.vals[test.indices]
x.test <- x.vals[test.indices, ]
y.train <- y.vals[train.indices]
x.train <- x.vals[train.indices, ]
#Build model
cv.lin.lasso <- cv.glmnet(x=x.train,y=y.train)
#Build model
cv.lin.lasso <- cv.glmnet(x=x.train,y=y.train)
lin.lasso.fit <- glmnet(x=x.test, y=y.test)
summary(lin.lasso.fit)
#Predict and check
lin.lasso.pred <- predict(lin.lasso.fit, newx=data.matrix(x.test),
s=best.cv.lin.lasso.lam)
lin.lasso.fit <- glmnet(x=x.train, y=y.train)
#Predict and check
lin.lasso.pred <- predict(lin.lasso.fit, newx=data.matrix(x.test),
s=best.cv.lin.lasso.lam)
best.cv.lin.lasso.lam <- cv.lin.lasso$lambda.min
lin.lasso.fit <- glmnet(x=x.train, y=y.train)
#Predict and check
lin.lasso.pred <- predict(lin.lasso.fit, newx=data.matrix(x.test),
s=best.cv.lin.lasso.lam)
lin.lasso.pred
getRMSE(lin.lasso.pred, pokedata$TierScore[test.indices])
lin.lasso.typing.table <- getTable(test.indices, lin.lasso.typing.pred)
lin.lasso.typing.table <- getTable(test.indices, lin.lasso.pred)
#Predict and check
lin.lasso.pred <- predict(lin.lasso.fit, newx=data.matrix(x.test),
s=best.cv.lin.lasso.lam)
#Display data
model.test.errors <- c(model.test.errors, getRMSE(lin.lasso.pred, pokedata$TierScore[test.indices]))
names(model.test.errors)[length(model.test.errors)] <- "Linear.LASSO.TYPE"
lin.lasso.typing.table <- getTable(test.indices, lin.lasso.pred)
summary(lin.lasso.typing.fit)
lin.lasso.typing.table <- getTable(test.indices, lin.lasso.pred)
summary(lin.lasso.fit)
coef(lin.lasso.fit)
View(lin.lasso.table)
lin.lasso.table <- getTable(test.indices, lin.lasso.pred)
summary(lin.lasso.fit)
coef(lin.lasso.fit)
View(coef(lin.lasso.fit))
coef(lin.lasso.fit, x=best.cv.lin.lasso.lam)
coef(lin.lasso.fit, s=best.cv.lin.lasso.lam)
View(lin.lasso.table)
getScore <- function(preddata, testdata)
{
#Round the scores to the appropriate category (we want to see if the overall categories are correct)
preddata[which(preddata > 10)] = 10
preddata[which(preddata)< 0] = 0
preddata = round(preddata)
score <- sum(abs(preddata - testdata))
score
}
getTable <- function(indices, predVals)
{
predCat <- rep("N/A", length(predVals))
predCat[which(predVals < 0.5)] = "PU"
predCat[which(predVals >= 9.5)] = "AG"
print(tierScore)
for(i in rev(2:length(tierCategories)-1))
{
predCat[which(predVals >= (tierScore[i] + tierScore[i+1])/2 &
predVals < (tierScore[i] + tierScore[i-1])/2)] <- tierCategories[i]
}
newFrame <- data.frame(pokedata$Name[indices], pokedata$TierScore[indices], predVals, pokedata$Tier[indices], predCat,
pokedata[,3:14][indices,])
colnames(newFrame) <- c("Pokemon", "Actual.Score", "Predicted.Score", "Real.Tier", "Predicted.Tier",colnames(pokedata)[3:14])
newFrame <- newFrame[order(-newFrame$Actual.Score),]
newFrame
}
getScore <- function(preddata, testdata)
{
#Round the scores to the appropriate category (we want to see if the overall categories are correct)
preddata[which(preddata > 10)] = 10
preddata[which(preddata)< 0] = 0
preddata = round(preddata)
score <- sum(abs(preddata - testdata))
score
}
model.test.errors <- c(model.test.errors, getScore(lm.typing.pred, pokedata$TierScore[test.indices]))
getScore <- function(preddata, testdata)
{
#Round the scores to the appropriate category (we want to see if the overall categories are correct)
preddata[which(preddata > 10)] = 10
preddata[which(preddata< 0)] = 0
preddata = round(preddata)
score <- sum(abs(preddata - testdata))
score
}
model.test.errors <- c(model.test.errors, getScore(lm.typing.pred, pokedata$TierScore[test.indices]))
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
print(model.test.errors)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
install.packages(c("gbm", "randomForest", "tree"))
require(trees)
require(tree)
?tree
tree.fit <- tree(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata, subset=train.indices)
full.tree.fit <- tree(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata, subset=train.indices)
print(full.tree.fit)
plot(full.tree.fit)
text(full.tree.fit, pretty=0)
set.seed(2019)
prune.tree.cv <- cv.tree(full.tree.fit, FUN=prune.tree)
print(model.test.errors)
plot(prune.tree.cv$size, prune.tree.cv$dev, type='b')
prune.tree.cv$dev
order(prune.tree.cv$dev)
plot(prune.tree.cv$size, prune.tree.cv$dev, type='b')
order(prune.tree.cv$dev)
prune.tree.cv$dev
full.tree.fit <- tree(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata, subset=train.indices)
set.seed(2019)
prune.tree.cv <- cv.tree(full.tree.fit, FUN=prune.tree)
plot(prune.tree.cv$size, prune.tree.cv$dev, type='b')
prune.tree.cv
plot(prune.tree.cv$size, prune.tree.cv$dev, type='b')
best.tree.size <- prune.tree.cv$size[order(prune.tree.cv$dev)[1]]
prune.tree.fit <- prune.tree(full.tree.fit, best=best.tree.size)
#build said pruned tree
prune.tree.fit <- prune.tree(full.tree.fit, best=best.tree.size)
prune.tree.predict <- predict(prune.tree.fit, newdata=pokedata[test,])
prune.tree.predict <- predict(prune.tree.fit, newdata=pokedata[test.indices,])
prune.tree.pred <- predict(prune.tree.fit, newdata=pokedata[test.indices,])
#Display results
model.test.errors <- c(model.test.errors, getScore(prune.tree.pred, pokedata$TierScore[test.indices]))
names(model.test.errors)[length(model.test.errors)] <- "Trees"
prune.tree.table <- getTable(test.indices, prune.tree.pred)
coef(prune.tree.table)
summary(prune.tree)
summary(prune.tree.fit)
View(prune.tree.fit)
print(model.test.errors)
View(prune.tree.fit)
View(prune.tree.table)
require(randomForest)
rand.forest.fit <- randomForest(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata, subset=train.indices)
set.seed(2019)
rand.forest.fit <- randomForest(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata, subset=train.indices)
rand.forest.pred <- predict(rand.forest.fit, newdata=pokedata[test, ])
rand.forest.pred <- predict(rand.forest.fit, newdata=pokedata[test.indices, ])
#Display results
model.test.errors <- c(model.test.errors, getScore(rand.forest.pred, pokedata$TierScore[test.indices]))
names(model.test.errors)[length(model.test.errors)] <- "RandomForests"
rand.forest.table <- getTable(test.indices, rand.forest.pred)
rand.forest.table <- getTable(test.indices, rand.forest.pred)
summary(rand.forest.fit)
plot(rand.forest.fit)
plot(rand.forest.fit, rand.forest.pred)
plot(rand.forest.pred, pokedata$TierScore[test.indices])
plot(rand.forest.pred, pokedata$TierScore[test.indices], xlab="Random Forest Prediction",
ylab="Actual Score")
plot(rand.forest.pred, pokedata$TierScore[test.indices], xlab="Random Forest Prediction (rounded)",
ylab="Actual Score")
View(rand.forest.table)
###
# Compare the methods
###
print(model.test.errors)
summary(prune.tree.fit)
plot(prune.tree.fit)
text(prune.tree.fit, pretty=0)
plot(rand.forest.fit)
require(gbm)
summary(boosted.fit)
set.seed(2019)
boosted.fit <- gbm(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata, subset=train.indices)
require(gbm)
set.seed(2019)
boosted.fit <- gbm(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata, subset=train.indices)
set.seed(2019)
boosted.fit <- gbm(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata[train.indices,])
summary(boosted.fit)
boosted.fit <- predict(boosted.fit, newdata=pokedata[test.indices,])
set.seed(2019)
boosted.fit <- gbm(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata[train.indices,])
boosted.pred <- predict(boosted.fit, newdata=pokedata[test.indices,])
set.seed(2019)
n.boosted.trees=5000
boosted.fit <- gbm(formula=TierScore~HP+Attack+Defense+Sp..Atk+Sp..Def+Speed+Generation+Legendary+Mega+
Dragon+Ghost+Normal+Psychic+Fire+Dark+Steel+Water+Ground+Fighting+Bug+Fairy+Grass+Electric+
Rock+Flying+Poison+Ice,
data = pokedata[train.indices,], distribution = "gaussian",
n.trees=n.boosted.trees, interaction.depth=4)
boosted.pred <- predict(boosted.fit, newdata=pokedata[test.indices,],n.trees=n.boosted.trees)
plot(boosted.pred, pokedata$TierScore[test.indices], xlab="Random Forest Prediction (rounded)",
ylab="Actual Score")
summary(boosted.fit)
View(rand.forest.table)
View(boosted.table)
#Display results
model.test.errors <- c(model.test.errors, getScore(boosted.pred, pokedata$TierScore[test.indices]))
names(model.test.errors)[length(model.test.errors)] <- "Boosted Trees"
boosted.table <- getTable(test.indices, boosted.pred)
plot(boosted.pred, pokedata$TierScore[test.indices], xlab="Random Forest Prediction (rounded)",
ylab="Actual Score")
summary(boosted.fit)
View(boosted.table)
###
# Compare the methods
###
print(model.test.errors)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
length(train.indices)
length(test.indices)
source('C:/Users/tariq/OneDrive/Projects and Memes/Pokemon classifier/Pokemon Classifier.R', echo=TRUE)
